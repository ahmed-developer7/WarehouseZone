@model Ganedata.Core.Entities.Domain.Order
@using Ganedata.Core.Entities.Helpers

@section scripts {

    @Html.DevExpress().GetStyleSheets(
        new StyleSheet { ExtensionType = ExtensionType.GridView, Theme = GaneStaticAppExtensions.DevexTheme },
        new StyleSheet { ExtensionType = ExtensionType.PopupControl, Theme = GaneStaticAppExtensions.DevexTheme },
        new StyleSheet { ExtensionType = ExtensionType.SpinEdit, Theme = GaneStaticAppExtensions.DevexTheme },
        new StyleSheet { ExtensionType = ExtensionType.DateEdit, Theme = GaneStaticAppExtensions.DevexTheme }
        )

    @Html.DevExpress().GetScripts(
        new Script { ExtensionType = ExtensionType.GridView },
        new Script { ExtensionType = ExtensionType.PopupControl },
        new Script { ExtensionType = ExtensionType.SpinEdit },
        new Script { ExtensionType = ExtensionType.DateEdit }
        )
}
@if (ViewBag.Layout)
{
    Layout = null;
}

@{
    ViewBag.Title = "Create Works Orders";
}
<script type="text/javascript">
    function OnGridFocusedRowChanged(s, e) {
        var name = s.name;
        if (name.indexOf("gridViewOrdDet") >= 0) {
            $('#selkeyhdPrddet').val(s.GetRowKey(s.GetFocusedRowIndex()));
        }
        $('.selkey').val(s.GetRowKey(s.GetFocusedRowIndex()));
    }
</script>
<h2><span>@ViewBag.Title</span></h2>

@using (Html.BeginForm("SaveOrdersBulk", "WorksOrders", FormMethod.Post, new { @id = "frmBulkWorksOrderForm" }))
{
    @Html.AntiForgeryToken()
    @Html.Hidden("selkeyhdPrddet", 100)
    @Html.Hidden("Viewreturn", ViewBag.returnView as bool?)
    <input type="hidden" id="OrderGroupToken" name="OrderGroupToken" value="@ViewBag.OrderGroupToken" />

    <div class=" col-md-12 order-forms pull-left mb-4">
        <div class="col-md-12 p-0" id="worksorders-bulkform">
            <div class="col-md-6 p-0 pull-left">
                <div class="input-group h-100 justify-content-center align-items-center">
                    @Html.LabelFor(model => model.ReportTypeId, htmlAttributes: new { @class = "col-md-4" })
                    <div class="col-md-8">
                        @Html.DropDownListFor(m => m.ReportTypeId, ViewBag.ReportTypes as IEnumerable<SelectListItem>, new { @class = "chosen-select" })
                    </div>
                </div>
                <div class="input-group h-100 justify-content-center align-items-center">
                    @Html.Label("Auth User", htmlAttributes: new { @class = "col-md-4" })
                    <div class="col-md-8">
                        @Html.DropDownList("AuthUserId", ViewBag.AuthUsers as IEnumerable<SelectListItem>, new { @class = "chosen-select", @disabled = "disabled" })
                    </div>
                </div>
                <div class="input-group h-100 justify-content-center align-items-center">
                    @Html.LabelFor(m => m.PPropertyId, htmlAttributes: new { @class = "col-md-4" })
                    <div class="col-md-8">
                        <div class="col-11 p-0 mt-1 pull-left">
                            @Html.DropDownListFor(m => m.PPropertyId, ViewBag.Properties as IEnumerable<SelectListItem>, new { @class = "chosen-select" })
                            <label class="perror" style="color: red; display: none; font-size: small">Select Property Please</label>
                        </div>
                        <div class="col-1 p-0 pull-left">
                            <input type="button" onclick="javaScript:ModelProperty.Show();" id="ProdGroupAdd" class="btn btn-primary" value="+">
                        </div>
                    </div>
                </div>

                <div class="input-group h-100 justify-content-center align-items-center">
                    @Html.Label("Tenants for Notification", htmlAttributes: new { @class = "col-md-4" })
                    <div class="col-md-8">
                        <div class="col-11 p-0 mt-1 pull-left">
                            @Html.ListBox("PropertyTenantIds", new MultiSelectList(ViewBag.PropertyTenants != null && (ViewBag.PropertyTenants as SelectList) != null ? (ViewBag.PropertyTenants as SelectList).Items : new List<SelectListItem>()),
                                new {Multiple = "multiple", size = "5", @id = "PropertyTenantIds", @class = "chosen-select", data_placeholder = "Choose Tenants"})
                        </div>
                        <div class="col-1 p-0 pull-left">
                            <button onclick="javaScript:selectAllTenants();" title="Pick all tenants" id="ProdGroupAdd" class="btn btn-primary fa fa-list p-2 ml-1"></button>
                        </div>
                    </div>
                </div>

                <div class="input-group h-100 justify-content-center align-items-center">
                    @Html.LabelFor(model => model.DepartmentId, htmlAttributes: new { @class = "col-md-4" })
                    <div class="col-md-8">
                        @Html.DropDownListFor(m => m.DepartmentId, ViewBag.Departments as IEnumerable<SelectListItem>, new { @class = "chosen-select" })
                    </div>
                </div>



            </div>
            <div class="col-md-6 p-0 pull-left">
                <div class="input-group h-100 justify-content-center align-items-center">
                    @Html.LabelFor(model => model.IssueDate, htmlAttributes: new { @class = "col-md-4" })
                    <div class="col-md-8">
                        @Html.DevExpress().DateEditFor(m => m.IssueDate,
                            settings =>
                            {
                                settings.Name = "IssueDate";
                                settings.Properties.DisplayFormatString = "dd/MM/yyyy";
                                settings.ClientVisible = true;
                                settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
                                settings.ControlStyle.CssClass = "form-control";
                                settings.Properties.ClientSideEvents.GotFocus = "function(s, e) { s.ShowDropDown(); }";

                            }
                            ).Bind(DateTime.UtcNow).GetHtml()
                        @Html.ValidationMessageFor(model => model.IssueDate)

                    </div>
                </div>
                <div class="input-group h-100 justify-content-center align-items-center">
                    @Html.LabelFor(model => model.ExpectedDate, htmlAttributes: new { @class = "col-md-4" })
                    <div class="col-md-8">
                        @Html.DevExpress().DateEditFor(m => m.ExpectedDate,
                            settings =>
                            {
                                settings.Name = "ExpectedDate";
                                settings.Properties.DisplayFormatString = "dd/MM/yyyy";
                                settings.ClientVisible = true;
                                settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
                                settings.ControlStyle.CssClass = "form-control";
                                settings.Properties.ClientSideEvents.GotFocus = "function(s, e) { s.ShowDropDown(); }";

                            }
                            ).Bind(DateTime.UtcNow).GetHtml()
                        @Html.ValidationMessageFor(model => model.ExpectedDate)

                    </div>
                </div>
                <div class="input-group h-100 justify-content-center align-items-center">
                    @Html.LabelFor(model => model.ConfirmDate, htmlAttributes: new { @class = "col-md-4" })
                    <div class="col-md-8">
                        @Html.DevExpress().DateEditFor(m => m.ConfirmDate,
                            settings =>
                            {
                                settings.Name = "ConfirmDate";
                                settings.Properties.DisplayFormatString = "dd/MM/yyyy";
                                settings.ClientVisible = true;
                                settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
                                settings.ControlStyle.CssClass = "form-control";
                                settings.Properties.ClientSideEvents.GotFocus = "function(s, e) { s.ShowDropDown(); }";

                            }
                            ).Bind(DateTime.UtcNow).GetHtml()
                        @Html.ValidationMessageFor(model => model.ConfirmDate)

                    </div>
                </div>
                <div class="input-group h-100 justify-content-center align-items-center">
                    @Html.LabelFor(model => model.InvoiceNo, htmlAttributes: new { @class = "col-md-4" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.InvoiceNo)

                    </div>
                </div>

                <div class="input-group h-100 justify-content-center align-items-center">
                    @Html.LabelFor(model => model.InvoiceDetails, htmlAttributes: new { @class = "col-md-4" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.InvoiceDetails)

                    </div>
                </div>

                <div class="input-group h-100 justify-content-center align-items-center">
                    @Html.LabelFor(model => model.OrderCost, htmlAttributes: new { @class = "col-md-4" })
                    <div class="col-md-8">
                        @Html.DevExpress().SpinEditFor(m => m.OrderCost,
                            settings =>
                            {
                                settings.Name = "OrderCost";
                                settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
                                settings.ControlStyle.CssClass = "form-control";

                            }).GetHtml()
                        @Html.ValidationMessageFor(model => model.OrderCost)
                    </div>
                </div>


            </div>
        </div>
        <span class="alert alert-danger" id="bulkOrderWarning" style="display:none"></span>
    </div>

    <div class="col-md-12 pull-left">
        <h3>Orders</h3>
        <div class="col-md-12 p-0">
            @Html.Action("_WorksOrdersOnBulkCreation", "Order")
        </div>
    </div>

    <div class="col-md-12 pull-left">
        <div class="order-shipmentinfo-panes">
            @Html.Partial("~/Views/EmailTemplates/_EmailRecipientsPartial.cshtml")
        </div>

    </div>

    <div class="col-md-offset-2 col-md-10 bottom-right">
        <a class="btn btn-primary" href="javascript:createSingleWorksOrder()">Add Order</a>
        <input type="button" value="Update Order" class="btn btn-primary " id="btnWOUpdateOrder" />
        <input type="submit" value="Finish/Send Notifications" class="btn btn-primary" />
        @if (ViewBag.returnView)
        {
            <div class="btn btn-default">
                @Html.ActionLink("Back to List", "Index", "PProperties")
                @*@Html.ActionLink("Back to List", "AnchoredOrderIndex", new { id = "WO" })*@
            </div>
        }
        else
        {
            <div class="btn btn-default">
                @Html.ActionLink("Back to List", "Index", "WorksOrders", null, null, ViewBag.Fragment as string, null, null)
                @*@Html.ActionLink("Back to List", "AnchoredOrderIndex", new { id = "WO" })*@
            </div>
        }
    </div>
}

<script>
    var createSingleWorksOrder = function () {
        if ($("#DepartmentId").val() == null || $("#DepartmentId").val() < 1) {
            $("#bulkOrderWarning").html("Please choose a department").show();
            return;
        }
        if ($("#PPropertyId").val() == null || $("#PPropertyId").val() < 1) {
            $("#bulkOrderWarning").html("Please choose a property").show();
            return;
        }
        $("#bulkOrderWarning").html("").hide();
        ModelWorksOrderSingle.Show();
    }
</script>