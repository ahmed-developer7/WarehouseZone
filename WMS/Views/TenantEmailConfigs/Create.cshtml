@model Ganedata.Core.Entities.Domain.TenantEmailConfig

@using Ganedata.Core.Entities.Helpers
@{
    /**/

    ViewBag.Title = "Create Email Config";
}
@section scripts {

    @Html.DevExpress().GetStyleSheets(
        new StyleSheet { ExtensionType = ExtensionType.PopupControl, Theme = GaneStaticAppExtensions.DevexTheme }

        )

    @Html.DevExpress().GetScripts(
        new Script { ExtensionType = ExtensionType.PopupControl }

        )
}

<h2><span>@ViewBag.Title</span></h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()


    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="col-md-6 pull-left">
        <div class="input-group h-100 justify-content-center align-items-center">

            @Html.LabelFor(model => model.SmtpHost, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-8">
                @Html.EditorFor(model => model.SmtpHost, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.SmtpHost, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="input-group h-100 justify-content-center align-items-center">
            @Html.LabelFor(model => model.SmtpPort, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-8">
                @Html.EditorFor(model => model.SmtpPort, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.SmtpPort, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="input-group h-100 justify-content-center align-items-center">
            @Html.LabelFor(model => model.UserEmail, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-8">
                @Html.EditorFor(model => model.UserEmail, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.UserEmail, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="input-group h-100 justify-content-center align-items-center">
            @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-8">
                @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="input-group h-100 justify-content-center align-items-center">
            @Html.LabelFor(model => model.DailyEmailDispatchTime, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-8">
                @Html.EditorFor(model => model.DailyEmailDispatchTime, new { htmlAttributes = new { @class = "form-control", type = "time" } })
                @Html.ValidationMessageFor(model => model.DailyEmailDispatchTime, "", new { @class = "text-danger" })
            </div>
        </div>

    </div>

    <div class="col-md-6 pull-left">

        <div class="input-group h-100 justify-content-center align-items-center">
            @Html.LabelFor(model => model.EnableSsl, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-8">
                <div class="checkbox">
                    @Html.EditorFor(model => model.EnableSsl)
                    @Html.ValidationMessageFor(model => model.EnableSsl, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="input-group h-100 justify-content-center align-items-center">
            @Html.LabelFor(model => model.IsActive, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-8">
                <div class="checkbox">
                    @Html.EditorFor(model => model.IsActive)
                    @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="input-group h-100 justify-content-center align-items-center">
            @Html.LabelFor(model => model.EnableRelayEmailServer, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-8">
                <div class="checkbox">
                    @Html.EditorFor(model => model.EnableRelayEmailServer)
                    @Html.ValidationMessageFor(model => model.EnableRelayEmailServer, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

    </div>

    <div class="col-md-offset-2 col-md-10 bottom-right">
        <input type="submit" value="Save" class="btn btn-primary" />
        <div class="back-list">@Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-default" })</div>
    </div>

}


