@using Ganedata.Core.Entities.Helpers
@{
    var grid = Html.DevExpress().GridView(settings =>
    {
        settings.Name = ViewBag.productId + "InventoryTransactiongridview";
        settings.CallbackRouteValues = new { Controller = "Products", Action = "_InventoryTransactions", productId = ViewBag.productId };
        settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);


        settings.Settings.ShowHeaderFilterButton = true;
        settings.SettingsPopup.HeaderFilter.Height = 200;
        settings.SettingsPopup.HeaderFilter.MinWidth = 500;

        settings.Settings.ShowFilterBar = GridViewStatusBarMode.Visible;


        settings.KeyFieldName = "InventoryTransactionId";
        settings.SettingsPager.Visible = true;
        settings.Settings.ShowGroupPanel = true;
        settings.Settings.ShowFilterRow = true;
        settings.SettingsBehavior.AllowFocusedRow = true;

        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.HideDataCells;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;

        settings.Columns.Add(c =>
        {
            c.FieldName = "InventoryTransactionId";
            c.Caption = "Id";
            c.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        });

        settings.Columns.Add(c =>
        {
            c.FieldName = "InventoryTransactionTypeName";
            c.Caption = "Transaction Type";
            c.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        });


        settings.Columns.Add("Quantity");

        settings.Columns.Add(c =>
        {
            c.FieldName = "DateCreated";
            c.Caption = "Date";
            c.Settings.AutoFilterCondition = AutoFilterCondition.Equals;
            c.ColumnType = MVCxGridViewColumnType.DateEdit;
            c.SetDataItemTemplateContent(m =>
            {
                var date = (DateTime?)DataBinder.Eval(m.DataItem, "DateCreated");
                DateTime? localDate = DateTimeToLocal.Convert(date, ViewBag.TimeZone);
                ViewContext.Writer.Write(localDate.HasValue ? localDate.Value.ToString("dd/MM/yyyy HH:mm") : "");
            });
        });

        settings.Columns.Add(c =>
        {
            c.FieldName = "LocationName";
            c.Caption = "Location";
            c.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        });

        settings.Columns.Add(c =>
        {
            c.FieldName = "InventoryTransactionRef";
            c.Caption = "Reference";
            c.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        });


        settings.Columns.Add(c =>
        {
            c.FieldName = "WarehouseName";
            c.Caption = "Warehouse";
            c.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        });

        settings.ClientSideEvents.FocusedRowChanged = "OnGridFocusedRowChanged";
        settings.SettingsPager.PageSizeItemSettings.Visible = true;
        settings.SettingsPager.PageSizeItemSettings.Items = new string[] { "10", "20", "50" };
    });
}
@grid.Bind(Model).GetHtml()


@if (Request.Url.AbsolutePath.ToLower().Contains("edit"))
{
    <div class="col-md-12 p-0 pull-left">
        @Html.ActionLink("Create New", "Create", "InventoryTransaction", null, new { @class = "btn btn-primary  " })
    </div>
} 