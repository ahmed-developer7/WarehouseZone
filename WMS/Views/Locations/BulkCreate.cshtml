@model Ganedata.Core.Entities.Domain.Locations
@using Ganedata.Core.Entities.Helpers

@section scripts {

    @Html.DevExpress().GetStyleSheets(
        new StyleSheet { ExtensionType = ExtensionType.SpinEdit, Theme = GaneStaticAppExtensions.DevexTheme },
        new StyleSheet { ExtensionType = ExtensionType.DateEdit, Theme = GaneStaticAppExtensions.DevexTheme }
        )

    @Html.DevExpress().GetScripts(
        new Script { ExtensionType = ExtensionType.SpinEdit },
        new Script { ExtensionType = ExtensionType.DateEdit }
        )
}
<hgroup>
    <h2><span>Create Locations</span></h2>
    @Html.Raw(Server.HtmlDecode(Html.ValidationSummary().ToString()))
</hgroup>

@using (Html.BeginForm("BulkCreate", "Locations", FormMethod.Post, new { @id = "frmlocations" }))
{
<div class="col-md-6 pull-left">
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.LocationId)
    <div class="input-group h-100 justify-content-center align-items-center">
        @Html.LabelFor(model => model.LocationGroupId, htmlAttributes: new { @class = "col-md-4" })
        <div class="col-md-8">
            @Html.DropDownListFor(x => x.LocationGroupId, new SelectList(ViewBag.LocationGroups, "Id", "Group"), new { @id = "drp", @class = "chosen-select" })

        </div>
    </div>
    <div class="input-group h-100 justify-content-center align-items-center">
        @Html.LabelFor(model => model.LocationTypeId, htmlAttributes: new { @class = "col-md-4" })
        <div class="col-md-8">
            @Html.DropDownListFor(x => x.LocationTypeId, new SelectList(ViewBag.LocationTypes, "LocationTypeId", "LocTypeName"), new { @id = "drp", @class = "chosen-select" })
            @Html.ValidationMessageFor(model => model.LocationTypeId)
        </div>
    </div>
    <div class="input-group h-100 justify-content-center align-items-center">
        @Html.Label("Location Products", htmlAttributes: new { @class = "col-md-4" })
        <div class="col-md-8">
            <div>
                @Html.ListBox("ProductIds", new MultiSelectList(ViewBag.Products, "ProductId", "Name"), new { Multiple = "multiple", size = "5", @class = "chosen-select", data_placeholder = "Choose products" })

            </div>
        </div>
    </div>
    <div class="input-group h-100 justify-content-center align-items-center">
        @Html.LabelFor(model => model.DimensionUOMId, htmlAttributes: new { @class = "col-md-4" })
        <div class="col-md-8">
            @Html.DropDownListFor(x => x.DimensionUOMId, new SelectList(ViewBag.DimensionUOMs, "Id", "DUOM"), new { @class = "chosen-select" })

        </div>
    </div>
    <div class="input-group h-100 justify-content-center align-items-center">
        @Html.LabelFor(model => model.UOMId, htmlAttributes: new { @class = "col-md-4" })
        <div class="col-md-8">
            @Html.DropDownListFor(x => x.UOMId, new SelectList(ViewBag.UOMs, "Id", "UOM"), new { @class = "chosen-select" })
        </div>
    </div>
    <div class="input-group h-100 justify-content-center align-items-center">
        @Html.LabelFor(model => model.AllowPick, htmlAttributes: new { @class = "col-md-4" })
        <div class="col-md-8">
            @Html.CheckBoxFor(model => model.AllowPick)

        </div>
    </div>
    <div class="input-group h-100 justify-content-center align-items-center">
        @Html.LabelFor(model => model.AllowPutAway, htmlAttributes: new { @class = "col-md-4" })
        <div class="col-md-8">
            @Html.CheckBoxFor(model => model.AllowPutAway)

        </div>
    </div>
    <div class="input-group h-100 justify-content-center align-items-center">
        @Html.LabelFor(model => model.AllowReplenish, htmlAttributes: new { @class = "col-md-4" })
        <div class="col-md-8">
            @Html.CheckBoxFor(model => model.AllowReplenish)

        </div>
    </div>
    <div class="input-group h-100 justify-content-center align-items-center">
        @Html.LabelFor(model => model.LocationDepth, htmlAttributes: new { @class = "col-md-4" })
        <div class="col-md-8">
            @Html.DevExpress().SpinEditFor(model => model.LocationDepth,
                 settings =>
                 {
                     settings.Name = "LocationDepth";
                     settings.Properties.MinValue = 1;
                     settings.Properties.MaxValue = 10;
                     settings.Properties.NullText = "From 1 to 10...";
                     settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
                     settings.ControlStyle.CssClass = "form-control";
                 }
             ).GetHtml()
        </div>
    </div>
    <div class="input-group h-100 justify-content-center align-items-center">
        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "col-md-4" })
        <div class="col-md-8">
            @Html.EditorFor(m => m.Description)

        </div>
    </div>
    <div class="input-group h-100 justify-content-center align-items-center">
        @Html.LabelFor(model => model.LocationHeight, htmlAttributes: new { @class = "col-md-4" })
        <div class="col-md-8">
            @Html.DevExpress().SpinEditFor(m => m.LocationHeight,
                 settings =>
                 {
                     settings.Name = "LocationHeight";
                     settings.Properties.MinValue = 1;
                     settings.Properties.MaxValue = 10;
                     settings.Properties.NullText = "From 1 to 10...";
                     settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
                     settings.ControlStyle.CssClass = "form-control";
                 }
             ).GetHtml()
        </div>
    </div>
    <div class="input-group h-100 justify-content-center align-items-center">
        <label class="col-md-4">Location Code<span style="color:red"> *</span></label>
        <div class="col-md-8">
            @Html.EditorFor(m => m.LocationCode)
            @Html.ValidationMessageFor(model => model.LocationCode)
        </div>
    </div>
</div>
    <div class="col-md-6 pull-left">

       
        <div class="input-group h-100 justify-content-center align-items-center">

            <label class="col-md-4">Location Name<span style="color:red"> *</span></label>
            <div class="col-md-8">
                @Html.EditorFor(m => m.LocationName)
                @Html.ValidationMessageFor(model => model.LocationName)
            </div>
        </div>

        <div class="input-group h-100 justify-content-center align-items-center">
            @Html.LabelFor(model => model.MixContainer, htmlAttributes: new { @class = "col-md-4" })
            <div class="col-md-8">
                @Html.CheckBoxFor(m => m.MixContainer)

            </div>
        </div>
        <div class="input-group h-100 justify-content-center align-items-center">
            @Html.LabelFor(model => model.PickSeq, htmlAttributes: new { @class = "col-md-4" })
            <div class="col-md-8">
                @Html.DevExpress().SpinEditFor(m => m.PickSeq,
                     settings =>
                     {
                         settings.Name = "PickSeq";
                         settings.Properties.MinValue = 1;
                         settings.Properties.MaxValue = 10;
                         settings.Properties.NullText = "From 1 to 10...";
                         settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
                         settings.ControlStyle.CssClass = "form-control";
                     }
                 ).GetHtml()
            </div>
        </div>
        <div class="input-group h-100 justify-content-center align-items-center">
            @Html.LabelFor(model => model.PutAwaySeq, htmlAttributes: new { @class = "col-md-4" })
            <div class="col-md-8">
                @Html.DevExpress().SpinEditFor(m => m.PutAwaySeq,
                     settings =>
                     {
                         settings.Name = "PutAwaySeq";
                         settings.Properties.MinValue = 1;
                         settings.Properties.MaxValue = 10;
                         settings.Properties.NullText = "From 1 to 10...";
                         settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
                         settings.ControlStyle.CssClass = "form-control";
                     }
                 ).GetHtml()
            </div>
        </div>
        <div class="input-group h-100 justify-content-center align-items-center">
            @Html.LabelFor(model => model.ReplenishSeq, htmlAttributes: new { @class = "col-md-4" })
            <div class="col-md-8">
                @Html.DevExpress().SpinEditFor(m => m.ReplenishSeq,
                     settings =>
                     {
                         settings.Name = "ReplenishSeq";
                         settings.Properties.MinValue = 1;
                         settings.Properties.MaxValue = 10;
                         settings.Properties.NullText = "From 1 to 10...";
                         settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
                         settings.ControlStyle.CssClass = "form-control";
                     }
                 ).GetHtml()
            </div>
        </div>
        <div class="input-group h-100 justify-content-center align-items-center">
            @Html.LabelFor(model => model.StagingLocation, htmlAttributes: new { @class = "col-md-4" })
            <div class="col-md-8">
                @Html.CheckBoxFor(m => m.StagingLocation)
            </div>
        </div>
        <div class="input-group h-100 justify-content-center align-items-center">
            @Html.LabelFor(model => model.LocationWeight, htmlAttributes: new { @class = "col-md-4" })
            <div class="col-md-8">
                @Html.DevExpress().SpinEditFor(m => m.LocationWeight,
                     settings =>
                     {
                         settings.Name = "LocationWeight";
                         settings.Properties.MinValue = 1;
                         settings.Properties.MaxValue = 10;
                         settings.Properties.NullText = "From 1 to 10...";
                         settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
                         settings.ControlStyle.CssClass = "form-control";
                     }
                 ).GetHtml()
            </div>
        </div>
        <div class="input-group h-100 justify-content-center align-items-center">
            @Html.LabelFor(model => model.LocationWidth, htmlAttributes: new { @class = "col-md-4" })
            <div class="col-md-8">
                @Html.DevExpress().SpinEditFor(m => m.LocationWidth,
                     settings =>
                     {
                         settings.Name = "LocationWidth";
                         settings.Properties.MinValue = 1;
                         settings.Properties.MaxValue = 10;
                         settings.Properties.NullText = "From 1 to 10...";
                         settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
                         settings.ControlStyle.CssClass = "form-control";
                     }
                 ).GetHtml()

            </div>
        </div>
        <div class="input-group h-100 justify-content-center align-items-center">
            @Html.Label("Start Value", new { @class = "col-md-4" })
            <div class="col-md-8">
                @Html.DevExpress().SpinEdit(
                     settings =>
                     {
                         settings.Name = "StartValue";
                         settings.Properties.MinValue = 1;
                         settings.Properties.MaxValue = 100000;
                         settings.Properties.NullText = "From 1 to 10...";
                         settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
                         settings.ControlStyle.CssClass = "form-control";
                     }
                 ).GetHtml()

            </div>
        </div>
        <div class="input-group h-100 justify-content-center align-items-center">
            @Html.Label("End Value", new { @class = "col-md-4" })
            <div class="col-md-8">
                @Html.DevExpress().SpinEdit(
                     settings =>
                     {
                         settings.Name = "EndValue";
                         settings.Properties.MinValue = 1;
                         settings.Properties.MaxValue = 100000;
                         settings.Properties.NullText = "From 1 to 10...";
                         settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
                         settings.ControlStyle.CssClass = "form-control";

                     }
                 ).GetHtml()

            </div>
        </div>

        <div class="input-group h-100 justify-content-center align-items-center">
            <div class="col-md-offset-2 col-md-12 bottom-right">
                <input type="submit" value="Save" class="btn btn-default" />
                <div class="btn btn-default">
                    @Html.ActionLink("Cancel", "Index")
                </div>
            </div>

        </div>
    </div>
        }


  