@using System.Web.UI.WebControls
@using Ganedata.Core.Entities.Helpers
@using Ganedata.Core.Entities.Enums
@{
    var grid = Html.DevExpress().GridView(settings =>
    {
        settings.Name = ViewBag.name;
        settings.CallbackRouteValues = new
        {
            Controller = "Order",
            Action = "_PurchaseOrders",
            @type = ViewBag.type
        };
        settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);

        settings.CustomBindingRouteValuesCollection.Add(
        GridViewOperationType.Paging,
        new { Controller = "Order", Action = "_PurchaseOrdersPaging", @type = ViewBag.type }
        );

        settings.CustomBindingRouteValuesCollection.Add(
        GridViewOperationType.Filtering,
        new { Controller = "Order", Action = "_PurchaseOrdersFiltering", @type = ViewBag.type }
        );

        settings.CustomBindingRouteValuesCollection.Add(
        GridViewOperationType.Sorting,
        new { Controller = "Order", Action = "_PurchaseOrdersSorting", @type = ViewBag.type }
        );

        settings.Settings.ShowHeaderFilterButton = true;
        settings.SettingsPopup.HeaderFilter.Height = 200;

        settings.Settings.ShowFilterBar = GridViewStatusBarMode.Visible;

        settings.KeyFieldName = "OrderID";

        settings.SettingsPager.Visible = true;
        settings.Settings.ShowGroupPanel = false;
        settings.Settings.ShowFilterRow = true;
        settings.Settings.ShowHeaderFilterButton = false;
        settings.SettingsBehavior.AllowFocusedRow = true;
        settings.SettingsPager.PageSize = 10;

        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.HideDataCells;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;

        settings.Columns.Add(c =>
        {
            c.FieldName = "OrderID";
            c.Caption = "Order Id";
            c.Width = Unit.Pixel(50);
            c.Visible = false;
            c.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "OrderNumber";
            c.Caption = "Order Number";
            c.Width = Unit.Pixel(150);
            c.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "Account";
            c.Caption = "Account Code";
            c.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "AccountName";
            c.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        });

        if (ViewBag.IsWorksOrdersEnabled)
        {
            settings.Columns.Add(c =>
            {
                c.FieldName = "Property";
                c.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
            });
        }

        settings.Columns.Add(c =>
        {
            c.FieldName = "DateCreated";
            c.Caption = "Created";
            c.Settings.AutoFilterCondition = AutoFilterCondition.Equals;
            c.ColumnType = MVCxGridViewColumnType.DateEdit;
            c.SetDataItemTemplateContent(m =>
            {
                var date = (DateTime?)DataBinder.Eval(m.DataItem, "DateCreated");
                DateTime? localDate = DateTimeToLocal.Convert(date, ViewBag.TimeZone);
                ViewContext.Writer.Write(localDate.HasValue ? localDate.Value.ToString("dd/MM/yyyy HH:mm") : "");
            });
        });

        settings.Columns.Add(c =>
        {
            c.FieldName = "DateUpdated";
            c.Caption = "Updated";
            c.Settings.AutoFilterCondition = AutoFilterCondition.Equals;
            c.ColumnType = MVCxGridViewColumnType.DateEdit;
            c.Width = Unit.Pixel(120);
            c.SetDataItemTemplateContent(m =>
            {
                var date = (DateTime?)DataBinder.Eval(m.DataItem, "DateUpdated");
                DateTime? localDate = DateTimeToLocal.Convert(date, ViewBag.TimeZone);
                ViewContext.Writer.Write(localDate.HasValue ? localDate.Value.ToString("dd/MM/yyyy HH:mm") : "");
            });
        });


        settings.Columns.Add(c =>
        {
            c.FieldName = "POStatus";
            c.Caption = "Status";
            c.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
            c.ColumnType = MVCxGridViewColumnType.ComboBox;
            var comboSettings = (ComboBoxProperties)c.PropertiesEdit;
            comboSettings.DataSource = Enum.GetValues(typeof(OrderStatusEnum));
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "Currecny";
            c.Caption = "Currency";
            c.Width = Unit.Pixel(50);
            c.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "OrderTotal";
            c.Caption = "Order Total";
            c.ColumnType = MVCxGridViewColumnType.SpinEdit;
            c.Width = Unit.Pixel(80);
            c.Settings.AutoFilterCondition = AutoFilterCondition.Equals;
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "OrderNotesListText";
            c.Caption = "Notes";
            c.Width = Unit.Percentage(20);
            c.PropertiesEdit.EncodeHtml = false;
            c.Settings.AllowAutoFilter = DefaultBoolean.False;
            c.Settings.AllowSort = DefaultBoolean.False;
        });

        settings.Columns.Add(c =>
        {
            c.FieldName = "InvoiceNo";
            c.Caption = "Invoice";
            c.SetDataItemTemplateContent(m =>
            {
                var invoiceNumber = DataBinder.Eval(m.DataItem, "InvoiceNo") ?? "";
                var invoiceDetails = DataBinder.Eval(m.DataItem, "InvoiceDetails") ?? "";
                var invoiceCost = ((decimal?)DataBinder.Eval(m.DataItem, "OrderCost") ?? 0);
                if (!string.IsNullOrEmpty(invoiceNumber.ToString()))
                {
                    ViewContext.Writer.Write("<div>Invoice Number : <b>" + invoiceNumber + "</b></div>");
                }
                if (!string.IsNullOrEmpty(invoiceDetails.ToString()))
                {
                    ViewContext.Writer.Write("<div>Invoice Details : <b>" + invoiceDetails + "</b></div>");
                }
                if (invoiceCost > 0)
                {
                    ViewContext.Writer.Write("<div>Invoice Cost : <b>" + invoiceCost + "</b></div>");
                }
            });
        });

        settings.Columns.Add(column =>
        {
            column.Width = System.Web.UI.WebControls.Unit.Percentage(15);
            column.Caption = "Actions";
            column.SetDataItemTemplateContent(m =>
            {
                var orderId = (int)DataBinder.Eval(m.DataItem, "OrderID");
                var statusId = (int)DataBinder.Eval(m.DataItem, "OrderStatusID");

                if (statusId == (int)OrderStatusEnum.Hold)
                {
                    ViewContext.Writer.Write("<a target='_blank' data-orderid=" + orderId + " data-statusid='1' data-type='PO' alt='Make Order Active' class='make-order-active btn fa fa-arrow-left'></a>");
                }
                if (statusId == (int)OrderStatusEnum.BeingPicked)
                {
                    ViewContext.Writer.Write("<a target='_blank' data-orderid=" + orderId + " data-statusid='1' data-type='PO' alt='Unlock order for picking' class='unlock-order btn fa fa-unlock'></a>");
                }
                if (statusId == (int)OrderStatusEnum.Complete)
                {
                    ViewContext.Writer.Write("<a target='_blank' data-orderid=" + orderId + " data-statusid='1' data-type='PO' alt='Make Order Active' class='make-order-active btn fa fa-arrow-left'></a>");
                }
            });
        });

        settings.Columns.Add(c =>
        {
            c.Caption = "Progress";
            c.SetDataItemTemplateContent(m =>
            {
                var statusId = (int)DataBinder.Eval(m.DataItem, "OrderStatusID");

                var processQty = (decimal)DataBinder.Eval(m.DataItem, "ProcessedQty");
                var returnQty = (decimal)DataBinder.Eval(m.DataItem, "ReturnQty");
                var Qty = (decimal)DataBinder.Eval(m.DataItem, "Qty");
                var value = 0m;
                if (Qty > 0) { value = (processQty - returnQty) / Qty; }
                var values = (Convert.ToDouble(value) * 100);

                Html.DevExpress().ProgressBar(pb =>
                {
                    pb.Name = "pb" + (int)DataBinder.Eval(m.DataItem, "OrderID");
                    pb.ToolTip = Qty + "/" + (processQty - returnQty) + " processed";
                    pb.Properties.IndicatorStyle.BackColor = System.Drawing.Color.DarkRed;
                    pb.EnableTheming = false;
                }).Bind(values>100?100:values).Render();

            });
        });




        settings.Columns.Add(column =>
        {
            column.Width = System.Web.UI.WebControls.Unit.Percentage(2);
            column.Caption = "Notifs";
            column.SetDataItemTemplateContent(m =>
            {
                var orderId = (int)DataBinder.Eval(m.DataItem, "OrderID");
                var emailcount = (int?)DataBinder.Eval(m.DataItem, "EmailCount");

                var functon = string.Format("showEmails({0})", orderId);
                if (emailcount.HasValue && emailcount > 0)
                {
                    ViewContext.Writer.Write("<a target='javascript:;' alt='Show Emails' class='fa fa-send-o' onclick=" + functon + ">     <b>" + emailcount + "</b></a>");
                }

            });
        });

        settings.SettingsDetail.ShowDetailRow = true;

        settings.SetDetailRowTemplateContent(c =>
        {

            Html.DevExpress().PageControl(s =>
            {
                s.EnableTabScrolling = true;
                s.Width = System.Web.UI.WebControls.Unit.Percentage(100);
                s.Name = DataBinder.Eval(c.DataItem, "OrderID").ToString();
                s.TabPages.Add("Order Details").SetContent(() =>
                {
                    Html.RenderAction("_PODetails", new { Id = DataBinder.Eval(c.DataItem, "OrderID") });
                });

            }).GetHtml();
        });

        settings.HtmlRowPrepared = (s, e) =>
        {

            if (e.RowType != GridViewRowType.Data) return;
            var statusId = (int)e.GetValue("OrderStatusID");
            if (statusId == (int)OrderStatusEnum.Cancelled)
            {
                e.Row.BackColor = System.Drawing.Color.LightCoral;
                e.Row.ForeColor = System.Drawing.Color.Black;
            }
        };



        settings.ClientSideEvents.FocusedRowChanged = "OnGridFocusedRowChanged";
        settings.ClientSideEvents.EndCallback = "OnGridFocusedRowChanged";
        settings.ClientSideEvents.BeginCallback = "OnBeginCallbackPO";

        settings.SettingsPager.PageSizeItemSettings.Visible = true;
        settings.SettingsPager.PageSizeItemSettings.Items = new string[] { "10", "20", "50" };
        settings.SettingsPager.PageSize = 10;

    });
}

@grid.BindToCustomData(Model).GetHtml()



