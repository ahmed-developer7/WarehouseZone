@using Ganedata.Core.Entities.Helpers
@using Ganedata.Core.Entities.Enums
@using Ganedata.Core.Entities.Helpers
@{
    var grid = Html.DevExpress().GridView(settings =>
    {
        settings.Name = "_TransferInOrderListGridView";
        settings.CallbackRouteValues = new { Controller = "Order", Action = "_TransferInOrders" };
        settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
        settings.CustomBindingRouteValuesCollection.Add(
            GridViewOperationType.Paging,
            new { Controller = "Order", Action = "_TransferInPaging", @type = ViewBag.type }
        );

        settings.CustomBindingRouteValuesCollection.Add(
            GridViewOperationType.Filtering,
            new { Controller = "Order", Action = "_TransferInFiltering", @type = ViewBag.type }
        );

        settings.CustomBindingRouteValuesCollection.Add(
            GridViewOperationType.Sorting,
            new { Controller = "Order", Action = "_TransferInSorting", @type = ViewBag.type }
        );


        settings.Settings.ShowHeaderFilterButton = true;
        settings.SettingsPopup.HeaderFilter.Height = 200;

        settings.Settings.ShowFilterBar = GridViewStatusBarMode.Visible;
        settings.KeyFieldName = "OrderID";
        settings.SettingsPager.Visible = true;
        settings.Settings.ShowGroupPanel = false;
        settings.Settings.ShowFilterRow = true;
        settings.Settings.ShowHeaderFilterButton = false;
        settings.SettingsBehavior.AllowFocusedRow = true;
        settings.SettingsPager.PageSize = 10;
        settings.Settings.ShowFilterBar = GridViewStatusBarMode.Visible;

        settings.SettingsPager.Visible = true;
        settings.Settings.ShowGroupPanel = true;
        settings.Settings.ShowFilterRow = true;
        settings.SettingsBehavior.AllowFocusedRow = true;

        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.HideDataCells;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;

        settings.Columns.Add(c =>
        {
            c.FieldName = "Account";
            c.Caption = "Account";
            c.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "OrderNumber";
            c.Caption = "Order Number";
            c.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        });

        settings.Columns.Add(c =>
        {
            c.FieldName = "DateCreated";
            c.Caption = "Order Date";
            c.Settings.AutoFilterCondition = AutoFilterCondition.Equals;
            c.ColumnType = MVCxGridViewColumnType.DateEdit;
            c.SetDataItemTemplateContent(m =>
            {
                var date = (DateTime?)DataBinder.Eval(m.DataItem, "DateCreated");
                DateTime? localDate = DateTimeToLocal.Convert(date, ViewBag.TimeZone);
                ViewContext.Writer.Write(localDate.HasValue ? localDate.Value.ToString("dd/MM/yyyy HH:mm") : "");
            });
        });

        settings.Columns.Add(c =>
        {
            c.FieldName = "TransferWarehouse";
            c.Caption = "Transfer Location";
            c.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "TransType";
            column.Visible = false;
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "Status";
            column.ColumnType = MVCxGridViewColumnType.ComboBox;
            var comboSettings = (ComboBoxProperties)column.PropertiesEdit;
            comboSettings.DataSource = Enum.GetValues(typeof(OrderStatusEnum));

        });


        settings.Columns.Add("OrderType", "Order Type");
        settings.Columns.Add(column =>
        {
            column.Width = System.Web.UI.WebControls.Unit.Percentage(15);
            column.Caption = "Actions";
            column.SetDataItemTemplateContent(m =>
            {
                var orderId = (int)DataBinder.Eval(m.DataItem, "OrderID");
                var statusId = DataBinder.Eval(m.DataItem, "Status");
                if (statusId.Equals("Hold"))
                {
                    ViewContext.Writer.Write("<a target='_blank' data-orderid=" + orderId + " data-statusid = '1' data-type = 'TO' alt='Make Order Active' class='make-order-active btn fa fa-arrow-left'></a>");
                }


            });
        });

        settings.Columns.Add(column =>
        {
            column.Width = System.Web.UI.WebControls.Unit.Percentage(2);
            column.Caption = "Notifs";
            column.SetDataItemTemplateContent(m =>
            {
                var orderId = (int)DataBinder.Eval(m.DataItem, "OrderID");
                var emailcount = (int?)DataBinder.Eval(m.DataItem, "EmailCount");

                var functon = string.Format("showEmails({0})", orderId);
                if (emailcount.HasValue && emailcount > 0)
                {
                    ViewContext.Writer.Write("<a target='javascript:;' alt='Show Emails' class='fa fa-send-o' onclick=" + functon + ">     <b>" + emailcount + "</b></a>");
                }

            });
        });
        settings.HtmlRowPrepared = (s, e) =>
        {

            if (e.RowType != GridViewRowType.Data) return;
            var statusId = (string)e.GetValue("Status");
            if (statusId =="Cancelled")
            {
                e.Row.BackColor = System.Drawing.Color.LightCoral;
                e.Row.ForeColor = System.Drawing.Color.Black;
            }
        };



        settings.SettingsDetail.ShowDetailRow = true;

        settings.SetDetailRowTemplateContent(c =>
        {
            Html.DevExpress().PageControl(s =>
            {
                s.EnableTabScrolling = true;
                s.Name = DataBinder.Eval(c.DataItem, "OrderID").ToString();
                s.Width = System.Web.UI.WebControls.Unit.Percentage(100);
                s.TabPages.Add("Order Details").SetContent(() =>
                {
                    Html.RenderAction("_TransferOrderDetails", "Order", new { Id = DataBinder.Eval(c.DataItem, "OrderID") });
                });
            }).GetHtml();
        });

        settings.ClientSideEvents.FocusedRowChanged = "OnGridFocusedRowChanged";
        settings.ClientSideEvents.EndCallback = "OnGridFocusedRowChanged";
        settings.ClientSideEvents.BeginCallback = "OnGridBeginCallBack";
        settings.SettingsPager.PageSizeItemSettings.Visible = true;
        settings.SettingsPager.PageSizeItemSettings.Items = new string[] { "10", "20", "50" };

    });
}
@grid.BindToCustomData(Model).GetHtml()