@using System.Web.UI.WebControls
@using Ganedata.Core.Entities.Helpers
@using Ganedata.Core.Entities.Enums

@{
    var grid = Html.DevExpress().GridView(settings =>
    {
        settings.Name = "PalletsListGridView" + ViewBag.Type + ViewBag.PalletsDispatchID;
        settings.CallbackRouteValues = new { Controller = "Pallets", Action = "_Pallets", type = ViewBag.Type, PalletsDispatchID = ViewBag.PalletsDispatchID };
        settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);

        settings.CustomBindingRouteValuesCollection.Add(
          GridViewOperationType.Paging,
          new { Controller = "Pallets", Action = "_PalletsGridViewsPaging", type = ViewBag.Type, PalletsDispatchID = ViewBag.PalletsDispatchID }
      );

        settings.CustomBindingRouteValuesCollection.Add(
        GridViewOperationType.Filtering,
        new { Controller = "Pallets", Action = "_PalletsGridViewFiltering", type = ViewBag.Type, PalletsDispatchID = ViewBag.PalletsDispatchID }
        );

        settings.CustomBindingRouteValuesCollection.Add(
        GridViewOperationType.Sorting,
        new { Controller = "Pallets", Action = "_PalletsGridViewDataSorting", type = ViewBag.Type, PalletsDispatchID = ViewBag.PalletsDispatchID }
        );



        settings.Settings.ShowHeaderFilterButton = true;
        settings.SettingsPopup.HeaderFilter.Height = 200;
        settings.Settings.ShowFilterBar = GridViewStatusBarMode.Visible;
        settings.KeyFieldName = "PalletID";
        settings.SettingsPager.Mode = GridViewPagerMode.ShowPager;

        settings.Settings.ShowFilterRow = true;
        settings.SettingsBehavior.AllowFocusedRow = true;
        settings.CommandColumn.ShowSelectCheckbox = true;
        settings.CommandColumn.Visible = true;

        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.HideDataCells;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;

        settings.Columns.Add(c =>
        {
            c.FieldName = "PalletNumber";
            c.Caption = "Pallet Number";
            c.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        });

        settings.Columns.Add(c =>
        {
            c.FieldName = "AccountName";
            c.Caption = "Account";
            c.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        });

        settings.Columns.Add(c =>
        {
            c.FieldName = "AccountCode";
            c.Caption = "Account Code";
            c.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        });

        settings.Columns.Add(c =>
        {
            c.FieldName = "DateCreated";
            c.Caption = "Created";
            c.Settings.AutoFilterCondition = AutoFilterCondition.Equals;
            c.ColumnType = MVCxGridViewColumnType.DateEdit;
            c.SetDataItemTemplateContent(m =>
            {
                var date = (DateTime?)DataBinder.Eval(m.DataItem, "DateCreated");
                DateTime? localDate = DateTimeToLocal.Convert(date, ViewBag.TimeZone);
                ViewContext.Writer.Write(localDate.HasValue ? localDate.Value.ToString("dd/MM/yyyy HH:mm") : "");
            });
        });

        settings.Columns.Add(s =>
        {
            s.FieldName = "DispatchTime";
            s.Caption = "Dispatched Info";
        });
        settings.Columns.Add(s =>
        {
            s.FieldName = "ScannedOnLoading";
            s.Caption = "Scanned On Loading";
        });
        settings.Columns.Add(s =>
        {
            s.FieldName = "ScannedOnDelivered";
            s.Caption = "Scanned On Delivered";
        });

        if (ViewBag.Type == 1)
        {
            settings.Columns.Add(c =>
            {
                c.Caption = "Action";

                c.SetDataItemTemplateContent(m =>
                {
                    var palletId = (int)DataBinder.Eval(m.DataItem, "PalletID");
                    var DispatchStatus = (int?)DataBinder.Eval(m.DataItem, "DispatchStatus");
                    if (DispatchStatus == null)
                    {
                        var function = string.Format("DeletePallet({0})", palletId);
                        ViewContext.Writer.Write("<a class='process-button fa fa fa-trash' href='javascript:" + function + ";'></a>");
                    }
                });
            });
        }

        settings.SettingsDetail.ShowDetailRow = true;

        settings.SetDetailRowTemplateContent(c =>
        {
            var palletId = DataBinder.Eval(c.DataItem, "PalletID").ToString();
            Html.RenderAction("_PalletDispatchInfo", "Pallets", new { palletId = palletId });
        });
        settings.ClientSideEvents.FocusedRowChanged = "OnPalletGridFocusedRowChanged";
        settings.ClientSideEvents.EndCallback = "OnPalletGridFocusedRowChanged";
        settings.ClientSideEvents.SelectionChanged = "function(s,e){ OnPalletSelected(s,e);}";

        settings.SettingsPager.PageSizeItemSettings.Visible = true;
        settings.SettingsPager.PageSizeItemSettings.Items = new string[] { "10", "20", "30", "40", "50" };

        if (ViewBag.detial != null && ViewBag.detial)
        {

            settings.Settings.ShowHeaderFilterButton = false;

            settings.Settings.ShowFilterRow = false;
            settings.SettingsDetail.ShowDetailRow = false;
            settings.SettingsBehavior.AllowFocusedRow = false;

            settings.CommandColumn.ShowSelectCheckbox = false;
            settings.CommandColumn.Visible = false;

        }
        settings.HtmlRowPrepared = (s, e) =>
        {
            bool? flag = ViewBag.RowColor;
            if (e.RowType != GridViewRowType.Data) return;

            flag = Convert.ToBoolean(e.GetValue("ProductCount"));

            if (flag == false)
            {
                e.Row.BackColor = System.Drawing.Color.LightCoral;
                e.Row.ForeColor = System.Drawing.Color.Black;
            }
        };


    });


}
@grid.BindToCustomData(Model).GetHtml()


