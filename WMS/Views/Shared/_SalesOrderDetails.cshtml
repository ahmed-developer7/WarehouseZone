@using System.Web.UI.WebControls
@using Ganedata.Core.Entities.Enums
    @{
        var grid = Html.DevExpress().GridView(settings =>
        {
            settings.Name = ViewBag.setname;
            settings.CallbackRouteValues = ViewBag.route;
            settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);

            settings.Settings.ShowHeaderFilterButton = true;
            settings.SettingsPopup.HeaderFilter.Height = 200;
            settings.Settings.ShowGroupFooter = GridViewGroupFooterMode.VisibleAlways;
            settings.Settings.ShowFooter = true;
            settings.Settings.ShowFilterBar = GridViewStatusBarMode.Visible;

            settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.HideDataCells;
            settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
            settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
            settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;
            settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;

            settings.KeyFieldName = "OrderDetailID";
            settings.SettingsPager.Visible = true;
            settings.Settings.ShowGroupPanel = true;
            settings.Settings.ShowFilterRow = true;
            settings.SettingsBehavior.AllowFocusedRow = true;
            settings.Columns.Add("ProductId", "Id");
            settings.Columns.Add("ProductMaster.Name", "Product");
            settings.Columns.Add("ProductMaster.SKUCode", "SKU");
            settings.Columns.Add("Price");
            settings.Columns.Add("WarrantyAmount", "War Amt");
            settings.Columns.Add("TotalWarrantyAmount", "Total War Amt");
            settings.Columns.Add("TaxName.PercentageOfAmount", "Tax %");
            settings.Columns.Add("TaxAmount", "Tax Amt");
            settings.Columns.Add("Notes");
            settings.Columns.Add("Qty");

            settings.Columns.Add(column =>
            {
                column.FieldName = "TotalAmount";
                column.Caption = "Total Amt";
                column.PropertiesEdit.DisplayFormatString = "c";
            });

            settings.Columns.Add(column =>
            {
                column.FieldName = "QtyProcessed";
            });
            settings.Columns.Add(column =>
            {
                column.FieldName = "QtyReturned";
                column.SetDataItemTemplateContent(container =>
                {
                    var qtyReturned = (decimal?)DataBinder.Eval(container.DataItem, "QtyReturned");
                    var cssClass = qtyReturned > 0 ? "label label-danger" : "";
                    ViewContext.Writer.Write("<div class='" + cssClass + "'>" + qtyReturned + "</div>");
                });
            });
            if (ViewBag.PreventProcessing != true && Request.Url.AbsolutePath.ToLower().Contains("salesorders/processorder/") || (Request.Url.AbsolutePath.ToLower().Contains("salesorders/_salesorderdetails/") && Request.UrlReferrer.AbsolutePath.ToLower().Contains("salesorders/processorder/")))
            {
                settings.Columns.Add(column =>
                {
                    column.Caption = "Actions";
                    column.Name = "rc";
                    column.Width = Unit.Pixel(100);
                    column.SetDataItemTemplateContent(container =>
                    {
                        bool? DirectShip = (bool?)DataBinder.Eval(container.DataItem, "DirectShip");
                        if (DirectShip != true)
                        {
                            var keyValue = container.KeyValue;
                            var orderid = DataBinder.Eval(container.DataItem, "OrderID");
                            var productName = DataBinder.Eval(container.DataItem, "ProductMaster.Name");
                            var productid = DataBinder.Eval(container.DataItem, "ProductId");
                            var ser = DataBinder.Eval(container.DataItem, "ProductMaster.Serialisable").ToString();
                            var processPallete = DataBinder.Eval(container.DataItem, "ProductMaster.ProcessByPallet").ToString();
                            var EnableGlobalProcessByPallet = DataBinder.Eval(container.DataItem, "EnableGlobalProcessByPallet").ToString();
                            var processOrderType = (int)EnumProcessOrderType.Normal;
                            if (ser == "True") { processOrderType = (int)EnumProcessOrderType.Serialize; }
                            else if (processPallete == "True" && EnableGlobalProcessByPallet == "True")
                            {
                                processOrderType = (int)EnumProcessOrderType.PalleteProcess;

                            }
                            var qty = DataBinder.Eval(container.DataItem, "Qty").ToString();
                            var rec_qty = DataBinder.Eval(container.DataItem, "QtyProcessed");
                            var type = DataBinder.Eval(container.DataItem, "TransType");

                            var scannableCodes = DataBinder.Eval(container.DataItem, "IdentifiersText").ToString();
                            var directPostAllow = ((bool)DataBinder.Eval(container.DataItem, "DirectPostAllowed") && !(decimal.Parse(rec_qty.ToString()) >= decimal.Parse(qty))).ToString();

                            var function = string.Format("addSerial({0},{1},{2},{3},{4},{5},{6})", keyValue, orderid, productid, processOrderType, qty, rec_qty, type);
                            var update = string.Format("updateDetails({0},{1})", keyValue, rec_qty);
                            var delete = string.Format("deleteDetails({0})", keyValue);
                            var orderDetailId = DataBinder.Eval(container.DataItem, "OrderDetailID").ToString();

                            if (rec_qty.ToString() == "0")
                            {
                                var processString = decimal.Parse(rec_qty.ToString()) >= decimal.Parse(qty) ? "" : "<a title='Process' class='process-button fa fa-floppy-o' style='cursor:pointer' id='" + keyValue + "' href='#' onclick=" + function + "></a>";
                                ViewContext.Writer.Write("<div class='sales-detail-actions' data-direct-post='" + directPostAllow + "' data-codes='" + scannableCodes + "' data-id='" + orderDetailId + "' data-pqty='" + rec_qty + "' data-productid='" + productid + "' data-productname='" + productName + "'>" + processString + "<a title='Update' class='fa fa-pencil' style='cursor:pointer' href='#' onclick=" + update + "></><a class='fa fa-trash' style='cursor:pointer' href='#' onclick=" + delete + "><a /></div>");
                            }
                            else
                            {
                                var processString = decimal.Parse(rec_qty.ToString()) >= decimal.Parse(qty) ? "" : "<a class='process-button fa fa-floppy-o' style='cursor:pointer' id='" + keyValue + "' href='#' onclick=" + function + ">/</a>";
                                ViewContext.Writer.Write("<div class='sales-detail-actions' data-direct-post='" + directPostAllow + "' data-codes='" + scannableCodes + "' data-id='" + orderDetailId + "' data-pqty='" + rec_qty + "' data-productid='" + productid + "' data-productname='" + productName + "'>" + processString + "<a title='Remove' class='fa fa-pencil' style='cursor:pointer' href='#' onclick=" + update + "></a></div>");
                            }
                        }
                    });
                });
            }

            settings.HtmlDataCellPrepared = (sender, e) =>
            {
                if (e.DataColumn.FieldName == "TotalAmount")
                {
                    e.Cell.BackColor = System.Drawing.Color.LightBlue;
                    e.Cell.BorderColor = System.Drawing.Color.Black;
                }
            };

            settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "TotalAmount").DisplayFormat = "Total = " + ViewBag.CurrencySymbol + "{0:n2}";
            settings.ClientSideEvents.FocusedRowChanged = "OnGridFocusedRowChanged";
            settings.SettingsPager.PageSizeItemSettings.Visible = true;
            settings.SettingsPager.PageSizeItemSettings.Items = new string[] { "10", "20", "50" };
        });
    }
    @grid.Bind(Model).GetHtml()