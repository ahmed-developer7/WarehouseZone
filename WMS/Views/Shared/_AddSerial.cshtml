@using System.Web.UI.WebControls
@model Ganedata.Core.Entities.Domain.InventoryTransaction

@using (Html.BeginForm("", "", FormMethod.Post, new { @id = "frmprocProduct" }))
{

}

<div class="col-md-12 pull-left">
    @if (Request.UrlReferrer.AbsolutePath.ToLower().Contains("purchaseorders")
                                                    || Request.UrlReferrer.AbsolutePath.Contains("inventorytransaction"))
    {
        <div class="input-group h-100 justify-content-center align-items-center">
            @Html.LabelFor(model => model.LocationId, htmlAttributes: new { @class = "col-md-4" })
            <div class="col-md-8">
                @Html.DropDownList("Locations", null, "", new { @class = "chosen-select" })
                @Html.ValidationMessageFor(model => model.LocationId)
            </div>
        </div>
    }
    <div class="col-md-12">
        <div class="input-group serial-popup-header h-100 justify-content-center align-items-center">
            <div class="col-md-6 input-group border-0 serial-popup-header h-100 justify-content-center align-items-center">
                @Html.Label("Qty Required", htmlAttributes: new { @class = "col-md-4 p-0 pull-left" })
                <div class="col-md-8 pull-left">
                    @Html.DevExpress().SpinEdit(settings =>
               {
                   settings.Name = "Quantity";
                   settings.Enabled = ViewBag.QuantityEnabled;
                   settings.Properties.MaxValue = 9999999999;
                   settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
                   settings.ControlStyle.CssClass = "form-control";

               }).Bind(ViewBag.Processed).GetHtml()
                    @Html.ValidationMessageFor(model => model.Quantity)

                </div>
            </div>
            <div class="col-md-6">
                @Html.DevExpress().ProgressBar(m =>
           {
               m.Name = "SerialQuantityProgressBar";
               m.Properties.Caption = "Progress";
               if (ViewBag.RequiredQuantity != null && ViewBag.ProcessedQuantity != null)
               {
                   int maxPos = Math.Max(ViewBag.RequiredQuantity, ViewBag.ProcessedQuantity);
                   m.Position = ViewBag.ProcessedQuantity;
                   m.Properties.Maximum = maxPos;
                   m.ToolTip = ViewBag.ProcessedQuantity + "/" + ViewBag.RequiredQuantity + " processed";
               }
               m.Width = Unit.Percentage(100);
           }).GetHtml()

            </div>
        </div>
        <div class="col-md-12 p-0 mt-1 mb-1 pull-left text-center">
            @if ((Request.UrlReferrer.AbsolutePath.ToLower().Contains("blindshipment")) && (!Request.UrlReferrer.AbsolutePath.ToLower().Contains("blindshipment?delivery=true")))
            {
                <input type="text" placeholder='Scan or enter serial number and press enter' class="serial-enter-box" onkeypress="BSVerifySerial(event, this)" autofocus />
            }
            else
            {
                <input type="text" placeholder='Scan or enter serial number and press enter' class="serial-enter-box form-control" onkeypress="VerifySerial(event, this)" autofocus />
            }
            <a href="#" style="display: none" onclick="RemoveSerials(event, this)">Remove</a>
        </div>
        <div id="serialWrapper">

        </div>
    </div>

    <div class="col-md-12 serial-range" style="display: none">
        <div class="card">
            <div class="card-body">
                <div class=" card-title">How many?</div>
                <div class="col-md-8 mt-1 pull-left">
                    <input type="text" class="serial-range-qty" placeholder="Quantity">
                </div>
                <div class="col-md-4 pull-left serial-range-button">
                    <input type="button" value="Generate Serials" class="btn-sm btn btn-primary" />
                </div>
            </div>
        </div>

    </div>
</div>

<div class="bottom-right-popup">
    @if (Request.UrlReferrer.AbsolutePath.ToLower().Contains("blindshipment") && !Request.UrlReferrer.AbsolutePath.ToLower().Contains("blindshipment?delivery=true"))
    {
        <input type="button" onclick="BScollectSerial()" value="Save" class="btn btn-primary" />
    }
    else
    {
        <input type="button" onclick="CollectSerials()" value="Save" class="btn btn-primary" />

        if (!Request.UrlReferrer.AbsolutePath.ToLower().Contains("goodsreturn"))
        {
            <input type="button" id="btnToggleSeriesSequence" value="Add Sequential Serials" class="btn btn-primary pull-right" />
        }
    }
    <input type="button" onclick="javacript: ModelAddSerial.Hide(); ModelGoodsReturn.Hide(); ModelBS.Hide();" value="Cancel" class="btn btn-default" />
</div>


