@using System.Web.UI.WebControls
@using DevExpress.Data
@using Ganedata.Core.Entities.Domain
@using Ganedata.Core.Entities.Helpers
@{
    var grid = Html.DevExpress().GridView(settings =>
    {
        settings.Name = "EmployeeShiftsGridview";
        settings.CallbackRouteValues = new
        {
            Controller = "EmployeeShifts",
            Action = "EmployeesShiftsGridview"
        };
        settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
        settings.CustomBindingRouteValuesCollection.Add(
            GridViewOperationType.Paging,
            new { Controller = "EmployeeShifts", Action = "_EmployeesShiftsGridViewsPaging" }
        );

        settings.CustomBindingRouteValuesCollection.Add(
        GridViewOperationType.Filtering,
        new { Controller = "EmployeeShifts", Action = "_EmployeesShiftsGridViewFiltering" }
        );

        settings.CustomBindingRouteValuesCollection.Add(
        GridViewOperationType.Sorting,
        new { Controller = "EmployeeShifts", Action = "_EmployeesShiftsGridViewDataSorting" }
        );



        settings.Settings.ShowHeaderFilterButton = false;
        settings.SettingsPopup.HeaderFilter.Height = 200;
        settings.ClientSideEvents.FocusedRowChanged = "OnGridFocusedRowChanged";
        settings.ClientSideEvents.EndCallback = "OnGridFocusedRowChanged";
        settings.ClientSideEvents.BeginCallback = "OnShiftsGridBeginCallback";

        settings.KeyFieldName = "Id";
        settings.SettingsPager.Visible = true;
        settings.Settings.ShowFilterRow = true;
        settings.SettingsBehavior.AllowFocusedRow = true;
        settings.SettingsPager.PageSize = 10;

        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.HideDataCells;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;

        settings.Columns.Add(c =>
        {
            c.FieldName = "Id";
            c.Settings.AllowAutoFilter = DefaultBoolean.False;


        });

        settings.Columns.Add(c =>
        {
            c.FieldName = "ResourceId";
            c.Settings.AutoFilterCondition = AutoFilterCondition.Equals;
            c.ColumnType = MVCxGridViewColumnType.SpinEdit;

        });

        settings.Columns.Add("Resources.FirstName", "First Name");
        settings.Columns.Add("Resources.SurName", "Sur Name");

        settings.Columns.Add(c =>
        {
            c.Caption = "EmployeeRole";
            c.SetDataItemTemplateContent(m =>
            {
                List<EmployeeRoles> roles = (List<EmployeeRoles>)DataBinder.Eval(m.DataItem, "Resources.EmployeeRoles");
                if (roles.Count > 0)
                {
                    ViewContext.Writer.Write(roles.FirstOrDefault().Roles.RoleName);
                }
            });
        });

        settings.Columns.Add(c =>
        {
            c.FieldName = "Date";
            c.Settings.AutoFilterCondition = AutoFilterCondition.Equals;
            c.ColumnType = MVCxGridViewColumnType.DateEdit;
            c.SetDataItemTemplateContent(m =>
            {
                var date = (DateTime?)DataBinder.Eval(m.DataItem, "Date");
                DateTime? localDate = DateTimeToLocal.Convert(date, ViewBag.TimeZone);
                ViewContext.Writer.Write(localDate.HasValue ? localDate.Value.ToString("dd/MM/yyyy") : "");
            });
        });

        settings.Columns.Add(c =>
        {
            c.FieldName = "TimeStamp";
            c.Settings.AutoFilterCondition = AutoFilterCondition.Equals;
            c.ColumnType = MVCxGridViewColumnType.DateEdit;
            c.SetDataItemTemplateContent(m =>
            {
                var date = (DateTime?)DataBinder.Eval(m.DataItem, "TimeStamp");
                DateTime? localDate = DateTimeToLocal.Convert(date, ViewBag.TimeZone);
                ViewContext.Writer.Write(localDate.HasValue ? localDate.Value.ToString("HH:mm:ss") : "");
            });
        });

        settings.Columns.Add("StatusType", "Status");
        settings.Columns.Add("Terminals.TerminalName", "Location");


        settings.SettingsPager.PageSizeItemSettings.Visible = true;
        settings.SettingsPager.PageSizeItemSettings.Items = new string[] { "10", "20", "50", "100", "500" };

        if (ViewBag.DisableCallBacks != null)
        {
            settings.Settings.ShowHeaderFilterButton = false;
            settings.SettingsPager.Visible = false;
            settings.Settings.ShowFilterRow = false;
            settings.SettingsPager.PageSizeItemSettings.Visible = false;
            settings.SettingsPager.Mode = GridViewPagerMode.ShowAllRecords;
            settings.SettingsBehavior.AllowSort = false;
        }

    });
}

@grid.BindToCustomData(Model).GetHtml()