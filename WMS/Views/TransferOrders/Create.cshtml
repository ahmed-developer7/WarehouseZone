@model Ganedata.Core.Entities.Domain.Order
@using Ganedata.Core.Entities.Enums;
@using Ganedata.Core.Entities.Helpers

@section scripts {

    @Html.DevExpress().GetStyleSheets(
        new StyleSheet { ExtensionType = ExtensionType.GridView, Theme = GaneStaticAppExtensions.DevexTheme },
        new StyleSheet { ExtensionType = ExtensionType.PopupControl, Theme = GaneStaticAppExtensions.DevexTheme },
        new StyleSheet { ExtensionType = ExtensionType.SpinEdit, Theme = GaneStaticAppExtensions.DevexTheme },
        new StyleSheet { ExtensionType = ExtensionType.DateEdit, Theme = GaneStaticAppExtensions.DevexTheme }
        )

    @Html.DevExpress().GetScripts(
        new Script { ExtensionType = ExtensionType.GridView },
        new Script { ExtensionType = ExtensionType.PopupControl },
        new Script { ExtensionType = ExtensionType.SpinEdit },
        new Script { ExtensionType = ExtensionType.DateEdit }
        )
}

@{
    ViewBag.Title = "Create New Transfer Order";
}
<script type="text/javascript">
    function OnGridFocusedRowChanged(s, e) {
        var name = s.name;
        if (name.indexOf("gridViewOrdDet") >= 0) {
            $('#selkeyhdPrddet').val(s.GetRowKey(s.GetFocusedRowIndex()));
        }
        $('.selkey').val(s.GetRowKey(s.GetFocusedRowIndex()));
    }
</script>

@if (Model.InventoryTransactionTypeId == (int)InventoryTransactionTypeEnum.TransferIn)
{
    <h2><span>Create Transfer In Order</span></h2>
}
else
{
    <h2><span>Create Transfer Out Order</span></h2>
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.Hidden("selkeyhdPrddet", 100);
    @Html.HiddenFor(m => m.InventoryTransactionTypeId, new { id = "inverntoryType" });

    <div class=" col-md-12 order-forms pull-left">
        @Html.ValidationSummary(true, "")
        <div class="col-md-5 p-0 pull-left mb-2">
            <div class="input-group h-100 justify-content-center align-items-center">
                @Html.LabelFor(model => model.OrderNumber, htmlAttributes: new { @class = "col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.OrderNumber)
                    <b id="btnGenerateNewOrderNumber" class="fa fa-retweet" title="Generate new order Number"></b>
                    @Html.ValidationMessageFor(model => model.OrderNumber)
                </div>
            </div>
            <div class="input-group h-100 justify-content-center align-items-center">
                @Html.LabelFor(model => model.IssueDate, htmlAttributes: new { @class = "col-md-4" })
                <div class="col-md-8">
                    @Html.DevExpress().DateEditFor(m => m.IssueDate,
                        settings =>
                        {
                            settings.Name = "IssueDate";
                            settings.Properties.DisplayFormatString = "dd/MM/yyyy";
                            settings.Date = DateTime.UtcNow;
                            settings.ClientVisible = true;
                            settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
                            settings.ControlStyle.CssClass = "form-control";
                            settings.Properties.ClientSideEvents.GotFocus = "function(s, e) { s.ShowDropDown(); }";

                        }
                        ).Bind(DateTime.UtcNow).GetHtml()
                    @Html.ValidationMessageFor(model => model.IssueDate)

                </div>
            </div>
            <div class="input-group h-100 justify-content-center align-items-center">
                @Html.LabelFor(model => model.ExpectedDate, htmlAttributes: new { @class = "col-md-4" })
                <div class="col-md-8">
                    @Html.DevExpress().DateEditFor(m => m.ExpectedDate,
                        settings =>
                        {
                            settings.Name = "ExpectedDate";
                            settings.Properties.DisplayFormatString = "dd/MM/yyyy";
                            settings.Date = DateTime.UtcNow;
                            settings.ClientVisible = true;
                            settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
                            settings.ControlStyle.CssClass = "form-control";
                            settings.Properties.ClientSideEvents.GotFocus = "function(s, e) { s.ShowDropDown(); }";

                        }
                        ).Bind(DateTime.UtcNow).GetHtml()
                    @Html.ValidationMessageFor(model => model.ExpectedDate)

                </div>
            </div>
            <div class="input-group h-100 justify-content-center align-items-center">
                @Html.LabelFor(model => model.Note, htmlAttributes: new { @class = "col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(m => m.Note)
                    @Html.ValidationMessageFor(model => model.Note)
                </div>
            </div>
            <div class="input-group h-100 justify-content-center align-items-center">
                @Html.LabelFor(model => model.TransferWarehouseId, htmlAttributes: new { @class = "col-md-4" })
                <div class="col-md-8">
                    @Html.DropDownListFor(m => m.TransferWarehouseId, ViewBag.Warehouses as IEnumerable<SelectListItem>, "Select Warehouse", new { @class = "chosen-select warehouse" })
                </div>
            </div>

            <div class="input-group h-100 justify-content-center align-items-center">
                @Html.Label("Auth User", htmlAttributes: new { @class = "col-md-4" })
                <div class="col-md-8">
                    @Html.DropDownList("AuthUserId", ViewBag.AuthUsers as IEnumerable<SelectListItem>, new { @class = "chosen-select", disabled = "disabled" })
                </div>
            </div>
            <div class="input-group h-100 justify-content-center align-items-center">
                @Html.LabelFor(model => model.DepartmentId, htmlAttributes: new { @class = "col-md-4" })
                <div class="col-md-8">
                    @Html.DropDownListFor(m => m.DepartmentId, ViewBag.Departments as IEnumerable<SelectListItem>, new { @class = "chosen-select" })
                </div>
            </div>
            <div class="input-group h-100 justify-content-center align-items-center">
                <div class="col-md-offset-2 col-md-10 bottom-right">
                    <input type="submit" value="Confirm Order" class="btn btn-primary oAction" />
                    <div class="btn btn-default">
                        @Html.ActionLink("Back to List", "Index", "TransferOrders", null, null, ViewBag.Fragment as string, null, null)


                        @* @Html.ActionLink("Back to List", "AnchoredOrderIndex", new { id = "TO" })*@
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-7 p-0 pull-left mb-2">
            <div class="col-md-12 report-date-header">
                <div class="input-group h-100 justify-content-center align-items-center">
                    <input type="button" id="OrderDetailadd" class="btn btn-primary orddet" value="Add">
                    <input type="button" id="OrderDetailUpdate" class="btn btn-primary orddet" value="Update">
                    <input type="button" id="OrderDetailDelete" class="btn btn-primary orddet" value="Delete">
                </div>

            </div>
            <div class="col-md-12 p-0">
                @Html.Action("_OrderDetails", "OrderDetail", new { Id = 0 })
            </div>
         
        </div>
    </div>
}

<script>
    $(document).ready(function () {
        $("#btnGenerateNewOrderNumber").on("click", function () {
            generateNextOrderNumber('OrderNumber');
        });
    });
</script>