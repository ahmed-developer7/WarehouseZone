@using System.Web.UI.WebControls
@using Ganedata.Core.Entities.Helpers
@using Ganedata.Core.Entities.Enums
@{
    var grid = Html.DevExpress().GridView(settings =>
    {
        settings.Name = "StocktakeGrid";
        settings.CallbackRouteValues = new { Controller = "StockTakes", Action = "StocktakeGridPartial" };
        settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);

        settings.Settings.ShowHeaderFilterButton = false;
        settings.SettingsPopup.HeaderFilter.Height = 200;

        settings.KeyFieldName = "StockTakeId";

        settings.SettingsPager.Visible = true;
        settings.Settings.ShowGroupPanel = true;
        settings.Settings.ShowFilterRow = true;
        settings.SettingsBehavior.AllowFocusedRow = true;

        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.HideDataCells;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;

        settings.Columns.Add("StockTakeId", "Stocktate Id");
        settings.Columns.Add("StockTakeReference", "Stocktake Reference");
        settings.Columns.Add("StockTakeDescription", "Stocktake Description");
        settings.Columns.Add(c =>
        {
            c.FieldName = "StartDate";
            c.Caption = "Start Date";
            c.Settings.AutoFilterCondition = AutoFilterCondition.Equals;
            c.ColumnType = MVCxGridViewColumnType.DateEdit;
            c.Width = Unit.Pixel(120);
            c.SetDataItemTemplateContent(m =>
            {
                var date = (DateTime?)DataBinder.Eval(m.DataItem, "StartDate");
                DateTime? localDate = DateTimeToLocal.Convert(date, ViewBag.TimeZone);
                ViewContext.Writer.Write(localDate.HasValue ? localDate.Value.ToString("dd/MM/yyyy HH:mm") : "");
            });
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "EndDate";
            c.Caption = "End Date";
            c.Settings.AutoFilterCondition = AutoFilterCondition.Equals;
            c.ColumnType = MVCxGridViewColumnType.DateEdit;
            c.Width = Unit.Pixel(120);
            c.SetDataItemTemplateContent(m =>
            {
                var date = (DateTime?)DataBinder.Eval(m.DataItem, "StartDate");
                DateTime? localDate = DateTimeToLocal.Convert(date, ViewBag.TimeZone);
                ViewContext.Writer.Write(localDate.HasValue ? localDate.Value.ToString("dd/MM/yyyy HH:mm") : "");
            });
        });

        
        settings.Columns.Add("Status");

        settings.CustomColumnDisplayText = (sender, e) =>
        {
            if (e.Column.FieldName == "Status")
            {
                e.DisplayText = LayoutHelpers.GetStStatusString(Convert.ToInt32(e.Value));
            }
        };
        settings.Columns.Add(column =>
        {
            column.Caption = "Action";
            column.SetDataItemTemplateContent(m =>
            {

                var detailId = DataBinder.Eval(m.DataItem, "StockTakeId").ToString();

                ViewContext.Writer.Write("<a target='_blank' href='/StockTakes/StockTakeDetail?sid=" + detailId + "'><i class='fa fa-eye'></i></div>");
            });
        });

        settings.ClientSideEvents.FocusedRowChanged = "OnGridFocusedRowChanged";
        settings.SettingsPager.PageSizeItemSettings.Visible = true;
        settings.SettingsPager.PageSizeItemSettings.Items = new string[] { "10", "20", "50" };

    });
    if (ViewData["EditError"] != null)
    {
        grid.SetEditErrorText((string)ViewData["EditError"]);
    }
}

@grid.Bind(Model).GetHtml()
