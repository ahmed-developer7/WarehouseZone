@using Ganedata.Core.Entities.Helpers
@Html.DevExpress().GridView(
    settings =>
    {
        settings.Name = "detailGrid_" + ViewData["EmployeeId"];
        settings.SettingsDetail.MasterGridName = "grid";
        settings.CallbackRouteValues = new { Controller = "TimeLog", Action = "GridDetailsViewPartial", employeeId = ViewData["EmployeeId"] };
        settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);

        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.HideDataCells;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;

        settings.KeyFieldName = "TimelogsId";
        settings.SettingsDetail.MasterGridName = "gridMaster";

        settings.Columns.Add(field =>
        {
            field.Settings.AllowSort = DefaultBoolean.False;
            field.FieldName = "WeekDay";
            field.Caption = " ";
        });

        settings.Columns.Add(field =>
        {
            field.Settings.AllowSort = DefaultBoolean.False;
            field.FieldName = "TotalHours";
        });
        settings.TotalSummary.Add(new ASPxSummaryItem()
        {
            SummaryType = DevExpress.Data.SummaryItemType.Sum,
            FieldName = "TotalHours",
            DisplayFormat = "Total: {0}"
        });

        settings.Columns.Add(field =>
        {
            field.Settings.AllowSort = DefaultBoolean.False;
            field.FieldName = "TotalSalary";
        });
        settings.TotalSummary.Add(new ASPxSummaryItem()
        {
            SummaryType = DevExpress.Data.SummaryItemType.Sum,
            FieldName = "TotalSalary",
            DisplayFormat = "Total: {0}"
        });
        settings.Columns.Add(field =>
        {
            field.Settings.AllowSort = DefaultBoolean.False;
            field.FieldName = "BreaksTaken";
        });

        settings.Columns.Add(c =>
        {
            c.Settings.AllowSort = DefaultBoolean.False;
            c.FieldName = "TimeIn";
            c.Caption = "First Time In";
            c.Settings.AutoFilterCondition = AutoFilterCondition.Equals;
            c.ColumnType = MVCxGridViewColumnType.DateEdit;
            c.SetDataItemTemplateContent(m =>
            {
                var date = (DateTime?)DataBinder.Eval(m.DataItem, "TimeIn");
                DateTime? localDate = DateTimeToLocal.Convert(date, ViewBag.TimeZone);
                ViewContext.Writer.Write(localDate.HasValue ? localDate.Value.ToString("dd/MM/yyyy HH:mm") : "");
            });
        });

        settings.Columns.Add(c =>
        {
            c.Settings.AllowSort = DefaultBoolean.False;
            c.FieldName = "TimeOut";
            c.Caption = "Last Time Out";
            c.Settings.AutoFilterCondition = AutoFilterCondition.Equals;
            c.ColumnType = MVCxGridViewColumnType.DateEdit;
            c.SetDataItemTemplateContent(m =>
            {
                var date = (DateTime?)DataBinder.Eval(m.DataItem, "TimeOut");
                DateTime? localDate = DateTimeToLocal.Convert(date, ViewBag.TimeZone);
                ViewContext.Writer.Write(localDate.HasValue ? localDate.Value.ToString("dd/MM/yyyy HH:mm") : "");
            });
        });

        settings.Columns.Add(field =>
        {
            field.Settings.AllowSort = DefaultBoolean.False;
            field.FieldName = "ExpectedHoursString";
            field.Caption = "Expected Hours";
        });

        settings.Columns.Add(field =>
        {
            field.Settings.AllowSort = DefaultBoolean.False;
            field.Caption = "Expected Breaks";
            field.FieldName = "Breaks";
        });

        settings.Columns.Add(field =>
        {
            field.Settings.AllowSort = DefaultBoolean.False;
            field.FieldName = "Status";
        });


        settings.FormatConditions.AddHighlight("Status", "(Status = 'Ok')", GridConditionHighlightFormat.GreenText);
        settings.FormatConditions.AddHighlight("Status", "(Status = 'SHORT')", GridConditionHighlightFormat.RedText);

        settings.Settings.ShowFooter = true;
    }).Bind(Model).GetHtml()
